<?php

namespace crow\IO;

require_once __DIR__ . "/SQLData.php";

/** Wrapper class for mysqli instance. May move to container style instead of extension in future. */
class SQLConnection extends \mysqli {
    /** @var int Holds timestamp of last ping/query. */
    private int $last_interaction;

    /** @var int Connection error number for *this instance*. Zero means no errors. */
    public int $conn_errno;

    /**
     * Produces a SQLConnection object using a credential array.
     * @param array $credentials An array of four named values:  
     * > "hostname" => Host address of database connection,  
     * > "username" => Username,  
     * > "password" => Password,  
     * > "database" => Name of database
     */
    public function __construct($credentials){
        /**
         * From xSQL:
         * mysqli_report(MYSQLI_REPORT_ALL);
         * mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_INDEX);
         * 
         * They were commented out, not sure what we had used them for previously.
         */
        parent::__construct($credentials["hostname"], $credentials["username"], $credentials["password"], $credentials["database"]);
        $this->conn_errno = mysqli_connect_errno();
    }

    /**
     * Ensures that \mysqli->close() is called on all SQLConnection instances.
     */
    public function __destruct(){
        $this->close();
    }

    /**
     * Communicates with the mysqli database, generating a \crow\SQL\Data object. Any instances of `$pattern` 
     * found in the `$query` string will be replaced using the given integer as an index in the `$strings` array 
     * and `preg_replace_callback`. Only the values in `$strings` will be passed through `mysqli_real_escape_string`.
     * @param string $query The query to be issued to the database.
     * @param string[] $strings An Array of strings to be injected using $pattern.
     * @param string $pattern A Perl-Regex pattern used for string injection.
     * @return SQLData A more easily searchable response-data type generated by the query.
     */
    public function query($query, $strings = [], $pattern = "/%([0-9]+)/"): SQLData {
        $query = preg_replace_callback($pattern, function ($matches) use ($strings){
            return $this->real_escape_string($strings[$matches[1]]);
        }, $query);
        //! xPHP::log("SQL: `$query`");
        $rv = parent::query($query);
        if ($this->errno != 2006) $this->last_interaction = time();
        $data = new SQLData($rv, $this->errno, $this->error);
        if (!is_bool($rv)){
            $rv->free_result();
        }
        //! if (!$data->success) xPHP::log("Error 0b: SQL query failed.");
        return $data;
    }

    /**
     * A replacement for mysqli::ping(). Operates by checking `time()` against `$last_interaction` and seeing if more than ten seconds have elapsed since last ping().
     * If that time has elapsed, then we will send a simple query and test it's response errno against 2006 to see if the connection has dropped.
     * If it has, ping will attempt to re-make the connection before returning.
     * @return bool True only if the Connection is still good.
     */
    public function ping(): bool {
        $time = time();
        if ($this->last_interaction + 10 > $time){
            return true;
        }

        $rv = $this->query("SELECT LAST_INSERT_ID()");
        if ($rv->mysqli_errno != 2006){
            return true;
        }

        return false;
    }
}